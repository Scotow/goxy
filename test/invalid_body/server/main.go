package main

import (
	"fmt"
	"log"
	"math/rand"
	"net/http"
)

const (
	invalidPayload = "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"
)

var (
	writeC  chan []byte
	WriteNC chan int

	count int
)

func handle(w http.ResponseWriter, r *http.Request) {
	//decoded, err := base64.StdEncoding.DecodeString(invalidPayload)
	//if err != nil {
	//	log.Println(err)
	//}

	b := <-writeC

	w.Header().Set("X-GOXY", fmt.Sprint(len(b)))

	n, err := w.Write(b)
	if err != nil {
		log.Println(err)
	}

	WriteNC <- n
	log.Println(count, n)
	count++
}

func writeRandom() {
	b := make([]byte, 3000)
	for {
		r := 1000 + rand.Intn(2000)
		rand.Read(b[:r])

		writeC <- b[:r]
		<-WriteNC
	}
}

func main() {
	writeC, WriteNC = make(chan []byte), make(chan int)
	go writeRandom()

	http.HandleFunc("/", handle)
	log.Fatal(http.ListenAndServe(":8081", nil))
}
